# Slice
A reference sheet for Python slice operations.

## Slicing 
Slicing allows us to access portions of strings, lists, and tuples. 
Slicing operations will not modify the object, it will return a new object instead. 

```
a[start:stop]     # items from start through stop-1
a[start:]           # items from start through end of the array
a[:stop]           # items from beginning through stop-1
```
The stop value represents the first value that is NOT in the selected slice. 
Leaving the stop value empty will slice the array from the start value to the end.
Leaving the start value empty will slice the array from the beginning to the stop value - 1.

## A slicing example
Imagine we define a variable 'example' to be equal to the string 'PYTHON'

```
>>> example = 'PYTHON'
```

We will run a few indexing and slicing operations on our example string.

```
>>> example[0] 
['P]
>>> example[3] 
['H']
>>> example[0:3]
['P', 'Y', 'T']
``` 

The index and slicing positions are depicted below.

```
   0    1    2    3    4    5      <------- Index Positions 
+---+---+---+---+---+---+
|  P |  Y | T | H |  O |  N |
+---+---+---+---+---+---+
0    1    2    3    4    5    6    <------- Slicing Positions 
```
Notice that slicing positions point in between characters while index positions point to the actual value.

It's note that slicing objects will returns new objects. It will NOT modify the object we are slicing. 
```
>>> arr = ['a', 'b', 'c', 'd']
>>> slice = arr[0:2]
>>> print(slice)
['a', 'b']
>>> print(arr)
['a', 'b', 'c', 'd']
```